#summary Porting code from Cortex 4 to 5

== Introduction ==

Cortex 5 introduces a few changes which are not backwards compatible with Cortex 4. This page provides details on how to deal with them.

== Parameterised Classes ==

The Parameterised constructor in Cortex 4 used to take a "name" parameter. This was removed in Cortex 5 as it provided no functionality above and beyond the typeName() method, and encouraged lazy habits where we ended up not registering Ops and Procedurals with the type system (and therefore name and typeName() wouldn't match).

===Procedurals===

{{{
# Cortex 4
###########
class MyProcedural( IECore.ParameterisedProcedural ) :

    def __init__( self ) :

        IECore.ParameterisedProcedural.__init__( self, "MyProcedural", "my description" )

# Cortex 5
##########

class MyProcedural( IECore.ParameterisedProcedural ) :

   def __init__( self ) :

        IECore.ParameterisedProcedural.__init__( self, "my description" )

# automatically implements typeName() etc and allocates a TypeId
IECore.registerObject( MyProcedural )

}}}

===Ops===

{{{

# Cortex 4
##########

class MyOp( IECore.Op ) :

    def __init__( self ) :

        IECore.Op.__init__( self, "MyOp", "my description"
            IECore.IntParameter(
                "result",
                "The result parameter for the Op.",
                0
            )
        )

# Cortex 5
##########

class MyOp( IECore.Op ) :

    def __init__( self ) :

        IECore.Op.__init__( self, "my description"
            IECore.IntParameter(
                "result",
                "The result parameter for the Op.",
                0
            )
        )

# automatically implements typeName() etc and allocates a TypeId
IECore.registerRunTimeTyped( MyOp )

}}}