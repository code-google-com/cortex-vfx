#summary Houdini application support for Cortex.

= Introduction  =

*IECoreHoudini* provides an interface for working with *Cortex* within SideFX's *Houdini*. 

 * Parameterised Procedurals evaluation & preview in SOPs. 
 * Interactive pick & transform. 
 * OpenGL Material preview. 
 * Converter for translating SOP geometry into Cortex primitives. 
 * Utility HDAs for working with Cortex in Houdini.

*NOTE:* this is an early release of code. You have been warned. 

= Building/Installation  =

== Overview  ==

First, make sure you have a working installation of *Cortex v5* from the *trunk*. You will need at least *r3324*. It must be built against *python_2.5* and *boost_1.33.1* to work correctly with *Houdini 10.0*. 

To build you should reuse the _options_ file you used to build Cortex in the first place and in addition set the following build options:
 * *CORTEX_ROOT*- This is the root of your Cortex installation.
 * *HFS* - This is your houdini installation path. Normally defined as the _$HFS_ envvar.
 * *HOUDINI_CXX_FLAGS* - The cflags used by Houdini to build dsos (see below).

You can add these to your original _options_ file (recommended) or specify them on the command line to _scons_. 

With those added to your options file you can build using:
{{{
% scons OPTIONS=/path/to/my/options
}}}

The tools will all be built under the _build_ directory.

{{{
build/
|-- houdini
|   |-- dso
|   |   `-- ieCoreHoudini.so
|   `-- otls
|       `-- ieCoreHoudini.otl
`-- lib
    |-- libIECoreHoudini.so
    `-- python2.5
        `-- site-packages
            `-- IECoreHoudini
                |-- FnProceduralHolder.py
                |-- ParmTemplates.py
                |-- Utils.py
                |-- _IECoreHoudini.so
                `-- __init__.py
}}}

*NOTE:* These tools have only been built and tested on Linux x86_64. 

== Finding the HOUDINI_CXX_FLAGS  ==

Houdini passes a lot of flags to the compiler when building dsos. The easiest way to find these out is to do a dummy build with Houdini's _hcustom_ tool. 

{{{
% touch test.cpp
% hconfig -t -e test.cpp
g++ -DVERSION=\"10.0.554\" -DDLLEXPORT= -D_GNU_SOURCE -DLINUX -DAMD64 -m64 -fPIC 
-DSIZEOF_VOID_P=8 -DSESI_LITTLE_ENDIAN -DENABLE_THREADS -DUSE_PTHREADS -D_REENTRANT 
-D_FILE_OFFSET_BITS=64 -c -DGCC4 -DGCC3 -Wno-deprecated -I/drd/software/ext/houdini/lin64
/hfs10.0.554/toolkit/include -I/drd/software/ext/houdini/lin64/hfs10.0.554/toolkit/include
/htools -Wall -W -Wno-parentheses -Wno-sign-compare -Wno-reorder -Wno-uninitialized 
-Wunused -Wno-unused-parameter -O2 -DMAKING_DSO -o test.o test.cpp
}}}

== Installation  ==

*IECoreHoudini* depends on four components which must be available to Houdini. 
 * Python Module - _IECoreHoudini_ must be on your _PYTHONPATH_ (installed to _build/lib/python2.5/site-packages_)
 * C++ Library - _libIECoreHoudini.so_ must be on you _LD_LIBRARY_PATH_ (installed to _build/lib_)
 * Houdini DSO - _ieCoreHoudini.so_ must be on your _HOUDINI_DSO_PATH_ (installed to _build/houdini/dso_)
 * Houdini OTL - _CortexHDAs.otl_ must be on your _HOUDINI_OTLSCAN_PATH_ (installed to _build/houdini/otls_)

== CMake  ==

There is a *CMake* script for building *IECoreHoudini* if you'd prefer. This has the advantage of not requiring an existing options configuration, and being able to find dependencies and build flags using the CMake modules installed in _config/cmake_. 

== Testing  ==

Run the unit tests from the *IECoreHoudini* root using Houdini's _hython_ command-line interpreter. 
{{{
 % hython test/All.py
}}}
*Note:* some of the tests may print "Render failed." when executing. This is a known problem with executing the render callback outside the gui and not a test fail. 

= Procedurals  =

*IECoreHoudini* defines a SOP node for holding ParameterisedProcedurals. This is under the tab menu as *Cortex Procedural* (node type is *ieProceduralHolder*).

When a parameterised procedural is associated with the SOP it will be rendered in the OpenGL viewport and it's parameters will appear on the *Parameters* pane allowing you to interface with the procedural. 

IMG

^A parameterised procedural with parameters, previewed in the Houdini viewport.^

By default, when a *Cortex Procedural* is dropped it has no parameterised procedural associated with it. 

IMG

^A procedural holder SOP in error because it doesn't have a parameterised procedural associated with it.^

We can create a parameterised procedural and associate it with a *Cortex Procedural* using the *IECoreHoudini.FnProceduralHolder* function set, just like in *IECoreMaya*. The function set simply takes a [http://www.sidefx.com/docs/houdini10.0/hom/hou/Node hou.Node] instance at initialisation to specify which SOP to operate on. 

IMG

^When a parametised procedural is associated with a procedural holder SOP it's type and version appear in the _Op Type_ and _Op Version_ parameters.^

In this example we create an instance of the *sphereProcedural* procedural and assign it to an *ieProceduralHolder* SOP.

{{{
import IECore, IECoreHoudini
geo = hou.node("/obj").createNode("geo", run_init_scripts=False)
cortex_proc = geo.createNode( "ieProceduralHolder" )
some_procedural = IECore.ClassLoader.defaultProceduralLoader().load( "sphereProcedural", 1 )()
fn = IECoreHoudini.FnProceduralHolder( cortex_proc )
fn.setParameterised( some_procedural )
}}}

There is a short-hand for this... 
{{{
import IECoreHoudini
IECoreHoudini.FnProceduralHolder.create("cortex_sphere", "sphereProcedural", 1 )
}}}

You can interact with the procedural geometry in exactly the same way you would a normal Houdini object.

IMG

^These are not your everyday spheres - each of them is a separate geometry object containing a ieProceduralHolder node which is rendering the example sphereProcedural - but you can pick and transform them as usual.^

OpenGL shading and lighting works as expected.
*NOTE:* there is a known limitation currently, that the material is only applied to the first render primitive rendered by a procedural. 

IMG

^A Cortex procedural (half-dome) with a Decal material applied and a point light.^

== Parameters  ==

The dynamic parameter interface is created when a procedural is set on the holder SOP and can represent these standard parameter types: 
 * Int 
 * Float 
 * Double 
 * Bool 
 * String 
 * Path, DirName, FileName, FileSequence 
 * V2i, V2f, V2d 
 * V3i, V3f, V3d 
 * Color3f, Color4f 
 * M44f, M44d

IMG

Currently unsupported parameter types are:
 * VectorParameter types
 * Compound 
 * FrameList 
 * Box2i, Box2f, Box2d
 * M44f, M44d 
 * Box3i, Box3f, Box3d

*NOTE:* Presets are also not currently supported. 

*IECoreHoudini* can modify behaviour/appearance based on some optional parameter _userData_ entries. 

 * *label* (StringData) - the parameter label in Houdini. Defaults to using a pretty-formatted version of the parameter's name. 
 * *gui_update* (BoolData) - whether this parameter will force a gui update. Defaults to True.

For example, here is a V3iParameter with a label which will not update the gui when it is modified:
{{{
V3iParameter(
     name = "v3iparm",
    description = "A v3i parameter",
    defaultValue = V3iData( V3i( 5, 5, 5 ) ),
    userData = {
        "label":StringData("My V3i Parameter"),
        "gui_update":BoolData(False)
    }
)
}}}

= Conversions  =

The *IECoreHoudini.FromHoudiniSopConverter()* class can convert native Houdini SOP geometry (meshes or points) into Cortex Primitives. Currently it only converts points, and consequently only detail and point attributes are converted into Cortex primitive variables. 

This example takes a Torus SOP (_/obj/geo1/torus1_) and using the converter creates a Cortex IECore.MeshPrimitive object.

IMG

{{{
import IECoreHoudini
scatter = hou.node( "/obj/geo1/scatter1" )
converter = IECoreHoudini.FromHoudiniSopConverter( scatter )
cortex_points = converter.convert()
}}}

= Utility HDAs  =

There are a couple of digital assets included with *IECoreHoudini* to make life a little bit easier. 

== Cortex Rman Inject ==
This is a geometry SHOP for injecting a Cortex Parameterised Procedural into a render via Soho's RIB generation. It wraps up the native Renderman Delayed Load geometry SHOP and adds some extra controls for specifying alternative bounds and adding extra procedural arguments.

IMG

== Cortex Writer ==
This is a SOP geometry writer ROP which converts SOP geometry and writes out FIO or COB files. Behind the scenes it just uses a regular geometryROP and an instance of IECoreHoudini.FromHoudiniSopConverter() that calls convert() per frame before writing the output. Feel free to dive in and have a look!

IMG