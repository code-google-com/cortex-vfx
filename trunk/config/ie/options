##########################################################################
#
#  Copyright (c) 2007-2009, Image Engine Design Inc. All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are
#  met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#
#     * Neither the name of Image Engine Design nor the names of any
#       other contributors to this software may be used to endorse or
#       promote products derived from this software without specific prior
#       written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
#  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
#  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
#  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
#  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
#  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
##########################################################################

import os
import sys
import os.path
import IEEnv
import re
import copy

def getOption( name, default ) :

	import sys
	result = default
	for a in sys.argv:
		if a[:len(name)+1]==name+"=" :	
			result = a[len(name)+1:]

	return result

# decide what compiler/app we're targeting. we either pass COMPILER_VERSION and COMPILER
# to do a straight install in /software/tools or we pass an APP and APP_VERSION pair
# to do an install in /software/tools/app/appVersion - in this case the compiler and settings
# are dictated by the application.

platform = IEEnv.platform()

compiler = getOption( "COMPILER", None )
compilerVersion = getOption( "COMPILER_VERSION", None )
targetApp = getOption( "APP", None )
if targetApp and (compiler or compilerVersion) :
	raise RuntimeError( "Must specify only one of COMPILER or APP" )

if targetApp :
	if targetApp!="nuke" :
		raise RuntimeError( "Check config logic applies to the new app and remove this exception." )
	targetAppVersion = getOption( "APP_VERSION", os.environ.get( targetApp.upper() + "_VERSION" ) )
	targetAppReg = IEEnv.registry["apps"][targetApp][targetAppVersion][platform]
	compiler = targetAppReg["compiler"]
	compilerVersion = targetAppReg["compilerVersion"]
	openEXRVersion = targetAppReg.get( "openEXRVersion", "1.6.1" )
else :
	if not compiler :
		compiler = IEEnv.registry["platformDefaults"][platform]["compiler"]
	if not compilerVersion :
		compilerVersion = IEEnv.registry["platformDefaults"][platform]["compilerVersion"]
	openEXRVersion = "1.6.1"
	
# get the compiler location using the registry
compilerReg = IEEnv.registry["compilers"][compiler][compilerVersion][platform]

# We need to set these so that ENV_VARS_TO_IMPORT can supply the correct environment to the scons test environments
os.environ["COMPILER"] = compiler
os.environ["COMPILER_VERSION"] = compilerVersion

CXX = os.path.join( compilerReg["location"], compilerReg["bin"] )

m = re.compile( "^([0-9]+)\.([0-9]+)\.([0-9]+)$" ).match( compilerVersion )
if not m:
	raise RuntimeError( "Cannot determine compiler version" )
	
compilerMajorVersion, compilerMinorVersion, compilerPatchVersion = m.group( 1, 2, 3 )
compilerVersionInt = int(compilerMajorVersion) * 100 + int(compilerMinorVersion) * 10 + int(compilerPatchVersion)

debug = getOption( "DEBUG", False )
CXXFLAGS = [ '-pipe', '-Wall' ]
if not IEEnv.platformOS().startswith( "osx" ) :
	CXXFLAGS += [ '-pthread' ]
	
if debug :

	CXXFLAGS += [ "-g" ]

	withAsserts = True

else :

	withAsserts = False
		
	# "-fvisibility-inlines-hidden" is only available on newer releases of gcc, but shows
	# some issues with 64-bit builds.	
	if compilerVersionInt >= 400 and IEEnv.platformHardware() != "x86_64" :

		CXXFLAGS += [ "-fvisibility-inlines-hidden" ]

withAsserts = getOption( "WITH_ASSERTS", withAsserts )
if not withAsserts :
	CXXFLAGS += [ "-DNDEBUG", "-DBOOST_DISABLE_ASSERTS" ]

TESTCXXFLAGS = copy.copy( CXXFLAGS )
	
# Special workaround for suspected gcc issue - see BoostUnitTestTest for more information
TESTCXXFLAGS += [ "-O0" ]
	
if not debug :

	CXXFLAGS += [ "-O2" ]
			

if IEEnv.platformHardware() == "i686" :

	CXXFLAGS += [ "-march=pentium4", "-mfpmath=sse" ]


PYTHONCXXFLAGS = copy.copy( CXXFLAGS )
	
###########################################################################################
# Warning flags. We'd like to set these for all environments but boost::python and
# boost::unit_test generate loads of warnings so we can't set it for the python bindings
# or C++ tests. GCC 4.3.0 gives out a lot of boost warnings in general, too. 
# boost 1.38.0 generates construction initialization order warnings which we don't want, either.
###########################################################################################		
if compilerVersionInt < 430 :

	CXXFLAGS += [ "-Werror", "-Wno-reorder" ]
	
LINKFLAGS = []	
if compilerVersionInt < 350 :
	##########################################################################################################
	# This is here to specifically address a problem in binutils-2.17 and later, when harmless warnings of the
	# form "X: referenced in section '.rodata' of Y: defined in discarded section" were changed to errors
	# Only gcc-3.4 and earlier omits these warnings, so we don't need to do anything for later compiler
	# versions.
	##########################################################################################################
	LINKFLAGS += [ "-Wl,--noinhibit-exec" ]
	

# set the include paths
BOOST_INCLUDE_PATH = "/software/tools/include/boost/1.38.0"
OPENEXR_INCLUDE_PATH = "/software/tools/include/OpenEXR/" + openEXRVersion
TIFF_INCLUDE_PATH = "/software/tools/include/tiff/3.8.2"
JPEG_INCLUDE_PATH = "/software/tools/include/jpeg/6b"
GLEW_INCLUDE_PATH = '/software/tools/include/glew/1.4.0'
FREETYPE_INCLUDE_PATH = "/software/tools/include/freetype/2.3.5/freetype2"
CPPPATH = "/software/tools/include/freetype/2.3.5"

# figure out the boost lib suffix
compilerVersionSplit = compilerVersion.split( "." )
if IEEnv.platformOS().startswith( "osx" ) :
	BOOST_LIB_SUFFIX = "-xgcc" + compilerVersionSplit[0] + compilerVersionSplit[1] + "-mt-1_38"
else:
	BOOST_LIB_SUFFIX = "-" + compiler + compilerVersionSplit[0] + compilerVersionSplit[1] + "-mt-1_38"
	
	
OPENEXR_LIB_SUFFIX = "-" + openEXRVersion

# find the right libraries based on compiler and platform
LIBPATH = "/software/tools/lib/" + platform + "/" + compiler + "/" + compilerVersion
if targetApp :
	## \todo This is very nuke specific. Perhaps we should have a registry option to
	# say what paths are required by what app?
	LIBPATH = targetAppReg["location"] + ":" + LIBPATH

# ignore python-config stuff and specify it all explicitly ourselves
pythonVersion = getOption( "PYTHON_VERSION", "2.5" )
pythonReg = IEEnv.registry['apps']['python'][pythonVersion][IEEnv.platform()]

pythonRoot = os.path.join( pythonReg["location"], compiler, compilerVersion )

if IEEnv.platformOS().startswith( "osx" ):
	pythonRoot = os.path.join( pythonRoot, "Python.framework", "Versions", pythonVersion )

PYTHON = os.path.join( pythonRoot, "bin", "python" + pythonVersion )
PYTHON_INCLUDE_PATH = pythonReg["location"] + "/" + compiler + "/" + compilerVersion + "/" + pythonReg["include"] + "/python" + pythonVersion
PYTHON_LINK_FLAGS = pythonReg["moduleLinkFlags"]

if PYTHON_LINK_FLAGS=="" :
	PYTHON_LINK_FLAGS = "-L" + pythonReg["location"] + "/" + compiler + "/" + compilerVersion + "/lib -lpython" + pythonVersion 

# find 3delight
try :
	dlReg = IEEnv.registry["apps"]["3delight"][getOption( "DL_VERSION", os.environ["DL_VERSION"] )][platform]
	RMAN_ROOT = dlReg["location"]
	os.environ["DELIGHT_CONF"] = "/software/config/3delight"
except :
	pass
	
# find maya, provided we're not building for some other app
if not targetApp :

	mayaVersion = getOption( "MAYA_VERSION", os.environ["MAYA_VERSION"] )
	mayaMajorVersion = mayaVersion
	try :
		mayaReg = IEEnv.registry["apps"]["maya"][mayaVersion][platform]
		mayaMajorVersion = mayaReg["majorVersion"]
		if compiler==mayaReg["compiler"] and compilerVersion==mayaReg["compilerVersion"] :
			MAYA_ROOT = mayaReg["location"]
			MAYA_LICENSE_FILE=mayaReg["wrapperEnvVars"]["LM_LICENSE_FILE"]
	except :
		pass
else :

	mayaMajorVersion = "0" # it needs a value just for the install setup below to execute			

# find nuke, unless we're on intel macs where the library doesn't link right now
if IEEnv.platform() != "osx104.i686" and IEEnv.platform() != "osx105.i686" and targetApp=="nuke" :
	try :
		nukeVersion = targetAppVersion
		nukeReg = IEEnv.registry["apps"]["nuke"][nukeVersion][platform]
		if compiler==nukeReg["compiler"] and compilerVersion==nukeReg["compilerVersion"] :
			NUKE_ROOT = nukeReg["location"]
			INSTALL_NUKELIB_NAME = "$INSTALL_PREFIX/tools/nuke/" + nukeVersion + "/lib/" + platform + "/$IECORE_NAME-$IECORE_MAJORMINORPATCH_VERSION"
			INSTALL_NUKEPYTHON_DIR = "$INSTALL_PREFIX/tools/nuke/" + nukeVersion + "/python/" + platform + "/cortexBase/$IECORE_MAJORMINORPATCH_VERSION"
	except :
		pass
	
# find truelight, unless we're on osx, where we haven't got it to link yet
if not IEEnv.platformOS().startswith("osx") :
	try :
		truelightReg = IEEnv.registry["apps"]["truelight"][getOption( "TRUELIGHT_VERSION", os.environ["TRUELIGHT_VERSION"] )][platform]
		TRUELIGHT_ROOT = truelightReg["location"]
	except :
		pass
else :
	TRUELIGHT_ROOT=""

# find doxygen
DOXYGEN = os.path.join( "/software/apps/doxygen", os.environ["DOXYGEN_VERSION"], platform, "bin", "doxygen" )

# ask for opengl support
WITH_GL=1

# import vars we need to get our doxygen and python wrappers working
ENV_VARS_TO_IMPORT="PATH COMPILER COMPILER_VERSION PYTHONPATH IEENV_ROOT IEENV_WORKING_PATH IEENV_LIBRARY_PREFIX_PATH DOXYGEN_VERSION IEENV_DEBUG IEENV_DEBUG_PYTHON IEENV_DEBUGGER IEENV_DEBUGGER_ARGS DELIGHT_CONF SCONS_VERSION DL_VERSION DL_SHADERS_PATH DL_DISPLAYS_PATH"

# make sure the tests can run
TEST_LIBPATH = ":".join( [ pythonReg["location"] + "/" + compiler + "/" + compilerVersion + "/lib", compilerReg["location"] + "/lib" ] )

# get the installation locations right
INSTALL_PREFIX = getOption( "INSTALL_PREFIX", os.path.expanduser( "~" ) )

if targetApp :
	INSTALL_HEADER_DIR = "$INSTALL_PREFIX/tools/" + targetApp + "/" + targetAppVersion + "/include/cortex/$IECORE_MAJORMINORPATCH_VERSION"
	INSTALL_LIB_NAME = "$INSTALL_PREFIX/tools/" + targetApp + "/" + targetAppVersion + "/lib/" + platform + "/$IECORE_NAME-$IECORE_MAJORMINORPATCH_VERSION"
	INSTALL_PYTHON_DIR = "$INSTALL_PREFIX/tools/" + targetApp + "/" + targetAppVersion + "/python/" + platform + "/cortexBase/$IECORE_MAJORMINORPATCH_VERSION"
else :
	INSTALL_HEADER_DIR = "$INSTALL_PREFIX/tools/include/cortex/$IECORE_MAJORMINORPATCH_VERSION"
	INSTALL_LIB_NAME = "$INSTALL_PREFIX/tools/lib/" + platform + "/" + compiler + "/" + compilerVersion + "/$IECORE_NAME-$IECORE_MAJORMINORPATCH_VERSION"
	INSTALL_PYTHON_DIR = "$INSTALL_PREFIX/tools/python/2.5/" + platform + "/" + compiler + "/" + compilerVersion + "/cortexBase/$IECORE_MAJORMINORPATCH_VERSION"

INSTALL_MAYALIB_NAME = "$INSTALL_PREFIX/tools/lib/" + platform + "/" + compiler + "/" + compilerVersion + "/$IECORE_NAME-$IECORE_MAJORMINORPATCH_VERSION"
INSTALL_GLSL_HEADER_DIR =  "$INSTALL_PREFIX/tools/glsl/$IECORE_NAME/$IECORE_MAJORMINORPATCH_VERSION"
INSTALL_RSL_HEADER_DIR =  "$INSTALL_PREFIX/tools/rsl/$IECORE_NAME/$IECORE_MAJORMINORPATCH_VERSION"
INSTALL_DOC_DIR = "$INSTALL_PREFIX/doc/tools/lib/cortex/$IECORE_MAJORMINORPATCH_VERSION"
INSTALL_MEL_DIR = "$INSTALL_PREFIX/tools/maya/" + mayaMajorVersion + "/mel/cortexBase/$IECORE_MAJORMINORPATCH_VERSION/$IECORE_NAME"
INSTALL_MAYAPLUGIN_NAME = "$INSTALL_PREFIX/tools/maya/" + mayaMajorVersion + "/plugins/" + platform + "/cortexBase/$IECORE_MAJORMINORPATCH_VERSION/$IECORE_NAME"
WITH_MAYA_PLUGIN_LOADER = 1

# set up a post install script to make op wrappers for IECore
INSTALL_CORE_POST_COMMAND="scons -i -f config/ie/postCoreInstall INSTALLPREFIX=$INSTALL_PREFIX MAJOR=$IECORE_MAJOR_VERSION MINOR=$IECORE_MINOR_VERSION PATCH=$IECORE_PATCH_VERSION install"

# set up a post install script to make op wrappers for IECore
INSTALL_COREMAYA_POST_COMMAND="scons -i -f config/ie/postCoreMayaInstall MAYA_VERSION='" + mayaMajorVersion + "' INSTALLPREFIX=$INSTALL_PREFIX MAJOR=$IECORE_MAJOR_VERSION MINOR=$IECORE_MINOR_VERSION PATCH=$IECORE_PATCH_VERSION install"

# set up a post install script to make op wrappers for IECoreTruelight
INSTALL_CORETRUELIGHT_POST_COMMAND="scons -i -f config/ie/installTruelightOps INSTALLPREFIX=$INSTALL_PREFIX MAJOR=$IECORE_MAJOR_VERSION MINOR=$IECORE_MINOR_VERSION PATCH=$IECORE_PATCH_VERSION install"

# speed up the build a bit hopefully.
BUILD_CACHEDIR = "/home/software/sconsBuildCache/" + platform
