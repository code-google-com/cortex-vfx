{
    channel classVersion {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = "import IECore, IECoreHoudini

# get our procedural node
procedural = hou.node( chsop(\"../procedural\") )
version = int(procedural.parm(\"__classVersion\").eval())
return version" language = python }
    }
    channel className {
      lefttype = extend
      righttype = extend
      defaultString = \"cubeProcedural\"
      flags = 0
      start = 5
      segment { length = 0 accel = 0.3333333432674408 0.3333333432674408 expr = "

import IECore, IECoreHoudini

# get our procedural node
procedural = hou.node( chsop(\"../procedural\") )
className = procedural.parm(\"__className\").eval()
return className
" language = python }
    }
    channel parameterString {
      lefttype = extend
      righttype = extend
      defaultString = \"\"
      flags = 0
      start = 5
      segment { length = 0 accel = 0.3333333432674408 0.3333333432674408 expr = "
import IECore, IECoreHoudini

# get our procedural node
procedural = hou.node( chsop(\"../procedural\") )
className = procedural.parm(\"__className\").eval()
version = int(procedural.parm(\"__classVersion\").eval())

# create a function set and get our parameterised object
fn = IECoreHoudini.FnProceduralHolder( procedural )
fn.setParameterisedValues()
parameterised = fn.getParameterised()

# get parameters from procedural
parms = IECore.ParameterParser().serialise( parameterised.parameters() )
csv_list = [ n if n else \"!\" for n in parms]
csv_str = ','.join(csv_list)
return csv_str" language = python }
    }
    channel vmproc_soppath {
      lefttype = extend
      righttype = extend
      defaultString = \"\"
      flags = 0
      start = 5
      segment { length = 0 accel = 0.3333333432674408 0.3333333432674408 expr = "bboxsop = chsop( \"../procedural\" )
if ch(\"../bboxmode\")==1:
    bboxsop = chsop( \"../boundsop\" )
return bboxsop" language = python }
    }
  }
