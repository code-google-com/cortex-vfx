Cortex 6.0.0
============

Additions :

* New Nuke plugin provides hosting of procedurals and ops within Nuke.

* LineSegmentParameters provide a convenient means of specifying lines to Parameterised classes, and are represented in Nuke as a line which can be manipulated in the viewport.

* StringAlgo.h now provides useful isUpperCase and isLowerCase functions.

* BoxOps.h now provides boxMajorAxis and boxSplit functions, the latter of which is used to bind an IECore.Box*.split() method.

* MotionBlock class provides a convenient means of managing Renderer::motionBegin/motionEnd blocks in an exception-safe way.

Improvements :

* DisplayDriver factory mechanism has been improved, and support for mapping RenderMan displays to IECore::DisplayDrivers has been added to IECoreRI. Images can now be rendered direct to memory using 3delight with no intermediate rib or image files. A display driver dso for 3delight also allows images to be rendered from rib to any cortex DisplayDriver. See test/IECoreRI/DspyTest.py for examples.

* AttributeCache now performs validation of names for headers, objects and attributes.

* IECoreMaya::ToMayaImageConverter and IECoreMaya::FromMayaImageConverter now have python bindings. See test/IECoreMaya/ImageConverterTest.py for examples.

* IECoreMaya::FromMayaStringPlugConverter now has python bindings.

* ToMayaPlugConverter can now set plugs which expect IECoreMaya::ObjectData values.

* IECoreGL::Renderer provides control over GL_DEPTH_TEST with the new gl:depthTest attribute.

* IECoreRI now accepts V3fData and V3fVectorData as values for shader parameters of type float[3]. This is handy for passing vectors when you do not want the automatic object->current transformation to be performed.

* Improved performance of IECoreGL::Renderer text rendering when using many renderers - they can now share a cache of fonts rather than each recomputing their own copies.

* Added IECore::RunTimeTyped::inheritsFrom() overloads taking two arguments, to simplify querying whether or not one class derives from another.

* IECoreMaya.ParameterUI.create() now falls back to uis registered without a typeHint if a ui with the specific typeHint can't be found.

* The IECore.CamelCase functions are now implemented in C++ in IECore/CamelCase.h. This makes them available in both C++ and Python.

* IECoreHoudini.TemporaryParameterValues now handles unexpanded strings and expressions correctly.

* IECoreMaya.FnOpHolder.create() now loads the default version for the op if no version is specified.

* Maya plugin now has a menu for the creation of nodes holding procedurals and ops. This can be disabled by setting the IECOREMAYA_DISABLE_MENU environment variable to 1. Similar menus can be constructed using the functions in IECoreMaya.Menus.

* ClassParameterHandler::doRestore() and ClassVectorParameterHandler::doRestore() are now proper virtual functions overriding a new ParameterHandler::doRestore() method. Clients simply call the ParameterHandler::restore method now rather than downcasting to the Class*ParameterHandler types first. Other ParameterHandlers may also implement doRestore() behaviour if necessary. This tidies up code which was added with the constraint of maintaining binary compatibility with major version 5.

Changes :

* Removed deprecated methods from InterpolatedCache - all queries now specify a frame, allowing efficient sharing of one cache among multiple threads.

* Removed deprecated methods classParameterModificationContext, setClassParameterClass and setClassVectorParameterClasses from IECoreMaya.FnParameterisedHolder. The parameterModificationContext method should be used instead.

* Removed deprecated IECore.initializeLog function - a FilteredMessageHandler created based on IECORE_LOG_LEVEL is automatically created now anyway.

Bug fixes :

* Fixed crashes caused by using SxRenderer with texture lookup shaders in multiple threads.

* TriangulateOp no longer changes the mesh interpolation.

* IECoreRI::GXEvaluator no longer crashes when zero length arrays are passed to the evaluate() method.

* Fixed bug which caused results from the wrong face to be returned when using the GXEValuator s,t based query.

* Fixed bugs which prevented NukeFileExaminer working with spaces in filenames or with Nuke's new # based padding syntax.

* Fixed bug which caused SequenceLsOp to perform modificationTime comparisons in the wrong timezone.

* CameraController::unproject now actually works.

* Fixed bugs which meant that RunTimeTyped::typeNameFromTypeId( RunTimeTypedTypeId ) and RunTimeTyped::typeIdFromTypeName( "RunTimeTyped" ) returned incorrect results.

* Fixed a long standing bug which meant that the various FromMaya*Converter::create() functions wouldn't always return the same type of converter. As an additional benefit converters are matched against the base classes of the types they return, making it possible to request a result type of Primitive from a mesh and have the FromMayaMeshConverter be considered as a match.

* Fixed bugs which meant that the RunTimeTyped methods of python classes derived from some Parameter types would not function correctly.

* Fixed IECoreNuke::CurveLookup to be compatible with Nuke 6.2.
